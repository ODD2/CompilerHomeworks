Useless nonterminals

   stmt
   vardecl


Terminals which are not used

   MODULE
   PROCEDURE
   BEG
   END
   EXIT
   RETURN
   DO
   LOOP
   WHILE
   REPEAT
   FOR
   CONTINUE
   BREAK
   CASE
   IF
   THEN
   ELSE
   RECORD
   TYPE
   USE
   VAR
   ARRAY
   CHAR
   CONST
   TRUE
   FALSE
   STRINGV
   REALV
   INTEGERV
   INTID
   REALID
   BOOLID
   STRID
   FUNCID
   PRINT
   PRINTLN
   UTIL
   FN
   IN
   READ
   LT
   LEQ
   GT
   GEQ
   EQ
   NEQ
   ANDL
   ORL
   NOTL
   ASSIGN
   '+'
   '-'
   '*'
   '/'
   '%'
   UNARY


Useless rules

    8 stmt: /* empty */

    9 vardecl: VAR id_type_list
   10        | vardecl id_type_list


Grammar

    0 $accept: test $end

    1 test: id_type_list

    2 id_list: ID
    3        | id_list ',' ID

    4 id_type_list: id_list ':' STRING ';'
    5             | id_list ':' BOOLEAN ';'
    6             | id_list ':' INTEGER ';'
    7             | id_list ':' REAL ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'*' (42)
'+' (43)
',' (44) 3
'-' (45)
'/' (47)
':' (58) 4 5 6 7
';' (59) 4 5 6 7
error (256)
MODULE (258)
PROCEDURE (259)
BEG (260)
END (261)
EXIT (262)
RETURN (263)
DO (264)
LOOP (265)
WHILE (266)
REPEAT (267)
FOR (268)
CONTINUE (269)
BREAK (270)
CASE (271)
IF (272)
THEN (273)
ELSE (274)
RECORD (275)
TYPE (276)
USE (277)
VAR (278)
ARRAY (279)
BOOLEAN (280) 5
CHAR (281)
CONST (282)
REAL (283) 7
STRING (284) 4
INTEGER (285) 6
TRUE (286)
FALSE (287)
STRINGV (288)
REALV (289)
INTEGERV (290)
ID (291) 2 3
INTID (292)
REALID (293)
BOOLID (294)
STRID (295)
FUNCID (296)
PRINT (297)
PRINTLN (298)
UTIL (299)
FN (300)
IN (301)
READ (302)
LT (303)
LEQ (304)
GT (305)
GEQ (306)
EQ (307)
NEQ (308)
ANDL (309)
ORL (310)
NOTL (311)
ASSIGN (312)
UNARY (313)


Nonterminals, with rules where they appear

$accept (67)
    on left: 0
test (68)
    on left: 1, on right: 0
id_list (69)
    on left: 2 3, on right: 3 4 5 6 7
id_type_list (70)
    on left: 4 5 6 7, on right: 1


state 0

    0 $accept: . test $end

    ID  shift, and go to state 1

    test          go to state 2
    id_list       go to state 3
    id_type_list  go to state 4


state 1

    2 id_list: ID .

    $default  reduce using rule 2 (id_list)


state 2

    0 $accept: test . $end

    $end  shift, and go to state 5


state 3

    3 id_list: id_list . ',' ID
    4 id_type_list: id_list . ':' STRING ';'
    5             | id_list . ':' BOOLEAN ';'
    6             | id_list . ':' INTEGER ';'
    7             | id_list . ':' REAL ';'

    ','  shift, and go to state 6
    ':'  shift, and go to state 7


state 4

    1 test: id_type_list .

    $default  reduce using rule 1 (test)


state 5

    0 $accept: test $end .

    $default  accept


state 6

    3 id_list: id_list ',' . ID

    ID  shift, and go to state 8


state 7

    4 id_type_list: id_list ':' . STRING ';'
    5             | id_list ':' . BOOLEAN ';'
    6             | id_list ':' . INTEGER ';'
    7             | id_list ':' . REAL ';'

    BOOLEAN  shift, and go to state 9
    REAL     shift, and go to state 10
    STRING   shift, and go to state 11
    INTEGER  shift, and go to state 12


state 8

    3 id_list: id_list ',' ID .

    $default  reduce using rule 3 (id_list)


state 9

    5 id_type_list: id_list ':' BOOLEAN . ';'

    ';'  shift, and go to state 13


state 10

    7 id_type_list: id_list ':' REAL . ';'

    ';'  shift, and go to state 14


state 11

    4 id_type_list: id_list ':' STRING . ';'

    ';'  shift, and go to state 15


state 12

    6 id_type_list: id_list ':' INTEGER . ';'

    ';'  shift, and go to state 16


state 13

    5 id_type_list: id_list ':' BOOLEAN ';' .

    $default  reduce using rule 5 (id_type_list)


state 14

    7 id_type_list: id_list ':' REAL ';' .

    $default  reduce using rule 7 (id_type_list)


state 15

    4 id_type_list: id_list ':' STRING ';' .

    $default  reduce using rule 4 (id_type_list)


state 16

    6 id_type_list: id_list ':' INTEGER ';' .

    $default  reduce using rule 6 (id_type_list)
